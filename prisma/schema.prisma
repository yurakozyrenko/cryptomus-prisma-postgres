generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  name             String
  password         String
  wallet           Float              @default(0)
  Payment          Payment[]
  SuccessPayment   SuccessPayment[]
  FailedPayment    FailedPayment[]
  Payout           Payout[]
  SuccessfulPayout SuccessfulPayout[]
  FailedPayout     FailedPayout[]
}

model Payment {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  orderId    String
  uuid       String
  amount     Float
  currency   String
  status     String
  paymentUrl String
  isFinal    Boolean
  createdAt  DateTime @default(now())
}

model SuccessPayment {
  id        Int      @id @default(autoincrement())
  orderId   String
  uuid      String
  amount    Float
  currency  String
  status    String
  address   String
  network   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model FailedPayment {
  id        Int      @id @default(autoincrement())
  orderId   String
  uuid      String
  amount    Float
  currency  String
  status    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Payout {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  orderId   String
  uuid      String
  amount    Float
  address   String
  currency  String
  status    String
  isFinal   Boolean
  network   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SuccessfulPayout {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  orderId   String
  uuid      String
  amount    Float
  address   String
  status    String
  currency  String
  network   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FailedPayout {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  orderId   String
  uuid      String
  amount    Float
  address   String
  status    String
  network   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
